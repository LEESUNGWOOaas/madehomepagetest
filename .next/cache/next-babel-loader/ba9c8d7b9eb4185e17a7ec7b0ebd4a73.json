{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport variable from \"./textvariable\";\n\nvar ForIndexMap = /*#__PURE__*/function (_React$Component) {\n  _inherits(ForIndexMap, _React$Component);\n\n  var _super = _createSuper(ForIndexMap);\n\n  function ForIndexMap(_props) {\n    var _this;\n\n    _classCallCheck(this, ForIndexMap);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onmarkerclick\", function (props, marker, e) {\n      _this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true,\n        infosindow: marker.name,\n        redirect: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onmapclick\", function (props) {\n      if (_this.state.showingInfoWindow) {\n        _this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    });\n\n    _this.state = {\n      eventlist: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      infosindow: \"\",\n      redirect: false\n    };\n    return _this;\n  }\n\n  _createClass(ForIndexMap, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var mapStyles = {\n        width: \"95%\",\n        height: \"100%\"\n      };\n      var eventmarkers = this.state.eventlist.map(function (item, i) {\n        return __jsx(Marker, {\n          key: i++,\n          name: \"축제 이름: \" + item.title + \"  전화번호: \" + item.tel + \"  시작날짜: \" + item.eventstartdate + \" 끝나는 날짜: \" + item.eventenddate,\n          title: \"축제 이름: \" + item.title + \"  전화번호: \" + item.tel + \"  시작날짜: \" + item.eventstartdate + \" 끝나는 날짜: \" + item.eventenddate,\n          position: {\n            lat: item.mapy,\n            lng: item.mapx\n          },\n          content: item,\n          onClick: _this2.onmarkerclick\n        });\n      });\n      return __jsx(\"div\", {\n        style: {\n          backgroundColor: \"#ffffff\",\n          height: \"100%\"\n        }\n      }, __jsx(Map, {\n        google: this.props.google,\n        zoom: 8 //14\n        ,\n        style: mapStyles,\n        initialCenter: {\n          lat: 37.60652774,\n          lng: 126.09281389\n        },\n        onClick: this.onmapclick\n      }, __jsx(Marker, {\n        name: \"Current location\",\n        title: \"center maker\",\n        position: {\n          lat: 37.60652774,\n          lng: 126.09281389\n        },\n        onClick: this.onmarkerclick\n      }), __jsx(InfoWindow, {\n        marker: this.state.activeMarker,\n        visible: this.state.showingInfoWindow,\n        content: \"<div>\"\n      }, __jsx(\"div\", {\n        id: \"iwc\"\n      }, this.state.infosindow))));\n    }\n  }]);\n\n  return ForIndexMap;\n}(React.Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCgl0XB4EdBHtmyB4P7Pu4HbnM3gndzyiY\"\n})(ForIndexMap);","map":null,"metadata":{},"sourceType":"module"}